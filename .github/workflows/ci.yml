name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run tests
        run: npm run test

      - name: Run tests with coverage
        run: npm run test:coverage

  build:
    name: Build and Lint
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run lint
        run: npm run lint

      - name: Run Next Build
        run: npm run build

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/ci-cd-unifacisa
          tags: |
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to AWS EC2
    runs-on: ubuntu-latest
    needs: [test, build, docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}

      - name: Add EC2 to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.AWS_EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        run: |
          ssh ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }} << 'EOF'
            # Navegar para o diret√≥rio da aplica√ß√£o
            cd /opt/unifacisa-app || {
              echo "Diret√≥rio da aplica√ß√£o n√£o encontrado. Criando..."
              sudo mkdir -p /opt/unifacisa-app
              sudo chown $USER:$USER /opt/unifacisa-app
            }
            
            # Parar aplica√ß√£o atual
            echo "Parando aplica√ß√£o atual..."
            docker-compose down 2>/dev/null || true
            
            # Fazer backup da vers√£o atual
            echo "Fazendo backup da vers√£o atual..."
            if [ -d ".git" ]; then
              git stash push -m "Backup before deploy $(date)"
            fi
            
            # Atualizar c√≥digo
            echo "Atualizando c√≥digo..."
            if [ -d ".git" ]; then
              git fetch origin
              git reset --hard origin/main
            else
              echo "Clonando reposit√≥rio..."
              git clone https://github.com/${{ github.repository }}.git .
            fi
            
            # Tornar scripts execut√°veis
            chmod +x deploy.sh manage.sh 2>/dev/null || true
            
            # Fazer deploy
            echo "Iniciando deploy..."
            if [ -f "deploy.sh" ]; then
              ./deploy.sh
            else
              # Deploy manual se n√£o houver script
              echo "Fazendo deploy manual..."
              npm ci --legacy-peer-deps
              npm run build
              docker-compose up -d --build
            fi
            
            # Verificar se a aplica√ß√£o est√° rodando
            echo "Verificando status da aplica√ß√£o..."
            sleep 10
            docker-compose ps
            
            # Testar aplica√ß√£o
            echo "Testando aplica√ß√£o..."
            if curl -f http://localhost:8000 > /dev/null 2>&1; then
              echo "‚úÖ Deploy realizado com sucesso!"
              echo "Aplica√ß√£o dispon√≠vel em: http://$(curl -s ifconfig.me):8000"
            else
              echo "‚ùå Erro no deploy. Verificando logs..."
              docker-compose logs --tail=20
              exit 1
            fi
          EOF

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "üéâ Deploy realizado com sucesso!"
            echo "Aplica√ß√£o dispon√≠vel em: http://${{ secrets.AWS_EC2_HOST }}:8000"
          else
            echo "‚ùå Deploy falhou. Verifique os logs acima."
          fi
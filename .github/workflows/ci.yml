name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: "npm"

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run tests
        run: npm run test

      - name: Run tests with coverage
        run: npm run test:coverage

  build:
    name: Build and Lint
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: "npm"

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run lint
        run: npm run lint

      - name: Run Next Build
        run: npm run build

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/ci-cd-unifacisa
          tags: |
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to AWS EC2
    runs-on: ubuntu-latest
    needs: [test, build, docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}

      - name: Add EC2 to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.AWS_EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2 using deploy.sh
        run: |
          ssh ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }} << 'EOF'
            echo "🚀 Iniciando deploy automático..."
            
            # Baixar e executar o script de deploy
            echo "Baixando script de deploy..."
            wget -O /tmp/deploy.sh https://raw.githubusercontent.com/${{ github.repository }}/main/deploy.sh
            
            # Tornar executável
            chmod +x /tmp/deploy.sh
            
            # Executar deploy
            echo "Executando deploy..."
            sudo /tmp/deploy.sh
            
            # Verificar se funcionou
            echo "Verificando status..."
            sleep 10
            
            cd /opt/unifacisa-app
            if sudo docker-compose ps | grep -q "Up"; then
              echo "✅ Deploy realizado com sucesso!"
              echo "🌐 Aplicação disponível na porta 8000 na instância EC2"
            else
              echo "❌ Erro no deploy. Verificando logs..."
              sudo docker-compose logs --tail=20
              exit 1
            fi
          EOF

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "🎉 Deploy realizado com sucesso!"
            echo "🌐 Aplicação disponível na porta 8000 na instância EC2"
          else
            echo "❌ Deploy falhou. Verifique os logs acima."
          fi
